import matplotlib.pyplot as plt

SMALL_SIZE = 8
MEDIUM_SIZE = 10
BIGGER_SIZE = 18

plt.rc('font', size=BIGGER_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=BIGGER_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=BIGGER_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=BIGGER_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=BIGGER_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=MEDIUM_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title

############################################################################################
##  Figure 1: Plot X: tick number Y:number of ALIVE cells  for 5 experiments of 128 nodes ##
############################################################################################

alive_128_1 = [298596264,374064553,410677992,428560847,439330190,444509279,446962255,447493705,448018479,448603298,448836050,448514202,448565877,448742691,448780250,448821163,448613430,448595349,448674857,448161159,448723176,448734190,448888200,448385136,449006440,448627649,448519106,448888122,448828130,448752786,448884950,448986363,448806737,448359788,448600413,448728892,448556245,448533914,448285225,448689278,448393398,449107772,448709806,448295301,448808729,448601651,448546681,448584649,448766379,448510799,448393831,448794061,448319455,449305452,448788364,448481288,448459598,448985303,448773087,448686225,448762407,448824832,448606324,448904491,448342260,448429863,448528619,449125429,448655123,448754857,448553359,449181385,448725856,448900870,448559931,448362720,448425964,448693599,448393248,448786783,448753816,448432536,448545620,448274971,448777591,448121581,448780921,448817617,448718113,448807462,448524146,448353164,448935202,448827511,448746641,448131748,448655028,448571895,448447730,448709857,448776210,448844256,448603032,448259417,448925308,448339911,448652586,448678963,448271072,448636167,449054167,448620879,448506161,448861287,449209096,448982512,448861412,448393123,448684577,448703860,448626968,448353126,448965913,448430699,448990086,448364986,448969872,448616217,448361647,448728857,448575289,448544206,448219093,448372583,449063029,448590319,448973401,448467196,448232249,448586647,448822510,448662301,448389937,449154596,448662568,448574057,448706144,448561964,448464003,448731971,448541999,448097556,448857075,448575543,448267257,448824785,448569553,448265291,448683886,448667865,448917700,448540318,448753120,448550743,448617516,448495327,449169334,448697238,448553950,448730357,448745575,448490443,448915947,448424223,448664542,448501566,448733306,448702040,448610723,448605429,448595060,448668207,448892085,448350059,448607799,448513252,448332561,448757956,448844149,448815691,448646218,449066991,448206945,448830444,448817682,448870816,448507242,448857461,448678157,448949011,449200495,448712976,448742575,448481796,448464710,448418732,448809810,448274157,449044456,448920677,448939134,447829116,448840910,448601549,448527452,448642530,448849241,449242594,448985631,448573896,448835579,448841238,448733373,448781673,448655182,448449763,448487824,448566695,448576565,449066470,448518680,449051289,448736840,448612523,448806916,448871760,448829774,448508398,449153589,448279071,448724760,448719690,448340393,448775315,448842108,448519547,448218448,448742850,448716156,449119923,448839071,447776716,448739422,448624697,448362219,448744602]
#print (" NODE = 128 THRD_PER_RANK = 64  ", len(alive_128_1))

alive_128_2 = [296030959,372239916,409333418,427735833,438882037,444176562,446764046,447360470,447888216,448532408,448740375,448426702,448494409,448655355,448707316,448732483,448530820,448530226,448598231,448072326,448661776,448653720,448813688,448292897,448937498,448573998,448434021,448791450,448759766,448670474,448799546,448902424,448753283,448276793,448496782,448670439,448473060,448453163,448202658,448601334,448297063,449025962,448626393,448220097,448725227,448526841,448480409,448503611,448695492,448447915,448287322,448733817,448237470,449228746,448701304,448408047,448355379,448911135,448685408,448607932,448673444,448746002,448513382,448808653,448256940,448336174,448459938,449075333,448567239,448682259,448483453,449105104,448658678,448824565,448507745,448301735,448374703,448602450,448311008,448698326,448673519,448329572,448469491,448172343,448714839,448047360,448684380,448738558,448613256,448714849,448446615,448267755,448854955,448749765,448673441,448055687,448577338,448501712,448362155,448633337,448701221,448771067,448506032,448155327,448849134,448260820,448575137,448606799,448180259,448566980,448984202,448553145,448410661,448781760,449090304,448910920,448769291,448270219,448571050,448602029,448490009,448254322,448886123,448331825,448911480,448299964,448897600,448543258,448271528,448677715,448449784,448485678,448142435,448284894,448973021,448508204,448871985,448385548,448167574,448514145,448720475,448601909,448289271,449054923,448575354,448477363,448630881,448487866,448395394,448655982,448465464,447993433,448792620,448482007,448188536,448730561,448486407,448194792,448609077,448597177,448860253,448499009,448681972,448432510,448535466,448383731,449072304,448605602,448467804,448651632,448659264,448409998,448812589,448341146,448569003,448444480,448646824,448622092,448507849,448545079,448492824,448561627,448788977,448293080,448524582,448442917,448282648,448659305,448747997,448724631,448543610,448965833,448105107,448766092,448770351,448803568,448441181,448778047,448609989,448881303,449095319,448597867,448652440,448415200,448419526,448348867,448736129,448231781,448970221,448833911,448842521,447714968,448804981,448538396,448447903,448578730,448767379,449184397,448886187,448486118,448747500,448735939,448640202,448685761,448614922,448376341,448428173,448492125,448532215,448945919,448438150,448954654,448656494,448522860,448738284,448825832,448732633,448434411,449072548,448205227,448631897,448597459,448232699,448686526,448806811,448437684,448125121,448667174,448632662,449026056,448733979,447728156,448664449,448560028,448241048,448628487]
#print (" NODE = 128 THRD_PER_RANK = 32  ", len(alive_128_2))

alive_128_4 = [290884232,368554182,406502865,426077536,437882893,443554656,446372936,447106779,447696353,448354103,448561374,448284676,448319732,448519572,448554549,448553427,448375835,448401109,448436163,447949505,448498753,448484323,448637834,448164682,448794628,448423609,448284527,448635209,448606000,448525689,448675036,448707542,448593765,448156245,448348446,448509543,448343332,448297118,448053466,448426388,448162167,448869717,448485858,448038440,448548281,448367856,448335417,448343402,448541773,448268076,448166082,448552073,448117615,449039326,448559020,448244431,448238308,448755764,448542545,448397634,448527735,448589284,448341719,448670817,448109427,448158242,448261471,448902756,448395377,448504498,448321972,448993566,448493381,448693987,448347507,448119153,448200954,448448796,448168832,448541883,448520996,448147151,448307856,448002706,448545239,447872345,448568438,448569802,448465759,448576370,448326267,448083318,448679801,448558496,448522769,447884062,448388648,448317534,448179436,448456923,448566854,448604073,448353087,447978136,448692542,448100849,448419718,448446738,448053757,448361980,448827170,448431132,448267585,448606670,448979418,448759144,448623978,448144073,448409386,448473038,448320800,448111505,448766651,448187962,448739285,448120544,448762452,448342035,448116958,448464085,448316812,448343132,448015401,448160685,448799828,448394757,448715162,448253255,447976015,448359499,448571678,448425747,448147803,448893649,448424327,448349362,448505062,448333435,448243141,448482658,448302390,447819437,448655674,448349453,448027596,448565763,448340752,448035334,448457985,448397533,448706376,448341561,448521909,448278301,448392088,448264553,448921059,448483421,448310005,448505156,448509590,448264861,448653576,448146344,448436903,448281103,448501826,448444744,448358500,448383171,448323891,448428211,448648394,448145084,448382399,448316900,448107075,448504290,448603982,448587332,448383017,448841265,447970217,448606764,448565677,448633495,448237194,448641055,448425213,448729933,448929798,448472361,448526240,448218137,448254887,448192296,448577130,448043546,448839090,448672515,448702480,447552013,448634803,448362807,448281709,448436670,448612641,449020425,448736299,448347515,448562585,448625333,448483097,448528374,448452712,448229524,448245930,448308502,448369966,448791606,448285336,448807419,448459283,448363179,448556198,448658578,448597808,448277308,448909931,448060849,448507394,448464594,448103000,448523517,448594166,448275272,447959137,448526103,448474010,448880882,448575263,447583935,448518069,448405799,448092463,448495583]
#print (" NODE = 128 THRD_PER_RANK = 16  ", len(alive_128_4))

alive_128_16 = [259640167,345874706,391210146,417157856,432484922,440340400,444273250,445624046,446494292,447332191,447541673,447259228,447374979,447533814,447632862,447568986,447433110,447414836,447498578,447009895,447544570,447542756,447628535,447159337,447834631,447513791,447334069,447688721,447588798,447608507,447683093,447745574,447594041,447181807,447378204,447532547,447327538,447343345,447170231,447443658,447208956,447963998,447499016,447140979,447551086,447443459,447327019,447342840,447602179,447265600,447218383,447592691,447164090,448161009,447571475,447318343,447284692,447770468,447583337,447442214,447592277,447637080,447429664,447654970,447187776,447174475,447334556,447997033,447495289,447536824,447435019,448044563,447552313,447705924,447355844,447076706,447235329,447483612,447132325,447619726,447533071,447194156,447310035,447044179,447560188,446912241,447655472,447565308,447559181,447667097,447376243,447195358,447651708,447597970,447559279,446929246,447472070,447299459,447222791,447529919,447615242,447630013,447415074,446971929,447763869,447143510,447463440,447530955,447136320,447435331,447815097,447395131,447340492,447642476,448010513,447786954,447601595,447238114,447451473,447596484,447307657,447076059,447804096,447231074,447833880,447133357,447796408,447406827,447099482,447566465,447299057,447390510,447018466,447178372,447756843,447413301,447702099,447284806,446985288,447397653,447574884,447444052,447162348,447939771,447436460,447413530,447546929,447365720,447259402,447504205,447308248,446878155,447691911,447425978,447063843,447640828,447446032,447064617,447485109,447439823,447739874,447377017,447585874,447330903,447439540,447316038,448027939,447460368,447434153,447553770,447638627,447239986,447705294,447164492,447549730,447317136,447532184,447456437,447482382,447445897,447347305,447472296,447644058,447256303,447400157,447352604,447160816,447584918,447587754,447609143,447463324,447890023,446938275,447633180,447643867,447706614,447261594,447690124,447481933,447759789,448029332,447468815,447585987,447271729,447331974,447172399,447631707,447073746,447946862,447744807,447755197,446495812,447634675,447441839,447336226,447389094,447674827,448069258,447841177,447409884,447643501,447659434,447528267,447517293,447503793,447319720,447228986,447420003,447394463,447814840,447372838,447957477,447497376,447422434,447642768,447693867,447628870,447372207,448000185,447102932,447605737,447564383,447068857,447607536,447750677,447317085,447027728,447488627,447569804,447973167,447636710,446602068,447613057,447482617,447140448,447527865]
#print (" NODE = 128 THRD_PER_RANK = 4  ", len(alive_128_16))

alive_128_64 = [135453803,251318768,325647424,374962206,405673376,423538045,433366864,437970002,440718555,442409380,443225822,443085130,443601228,443629815,443743472,443693277,443503498,443552698,443645383,443087555,443779268,443739045,443838008,443353900,443837102,443692160,443332555,443929814,443681239,443872762,443913236,443901754,443707654,443402623,443651997,443616307,443474467,443543690,443357667,443606570,443472140,444024392,443572726,443240359,443619922,443578526,443456027,443397652,443763398,443442351,443379172,443704710,443340872,444293923,443726853,443576117,443411799,443934119,443691698,443612949,443660811,443767370,443561325,443826701,443320409,443273800,443551064,444213511,443545153,443704114,443507265,444179486,443630163,444040068,443433009,443264163,443450742,443559176,443197887,443752568,443621436,443365632,443457304,443115092,443570325,443051348,443861208,443687768,443763810,443689207,443554629,443260949,443739073,443630988,443625804,443080823,443670773,443399170,443293003,443644279,443793888,443709473,443545736,443091223,443902840,443186451,443604727,443618482,443346595,443514973,443974910,443598468,443545571,443845884,444224299,443965005,443812371,443470519,443686401,443652830,443540599,443148489,443981826,443380888,444015020,443072244,444037907,443574527,443247513,443687517,443488226,443588643,442904093,443447935,443978520,443519372,443922296,443401968,443156569,443526903,443809903,443529386,443352908,444048894,443528739,443547283,443569055,443451885,443412253,443645458,443544866,442860945,443917796,443389582,443325122,443643030,443602728,443207021,443665762,443449312,444076612,443501996,443775940,443421412,443635730,443414523,444120549,443695390,443545896,443703472,443738054,443505020,443827764,443293291,443577873,443422331,443672115,443643763,443586255,443686094,443418847,443651476,443931389,443348722,443464118,443598016,443191283,443699326,443853256,443622095,443617826,444018598,443124438,443822753,443696237,443960178,443214923,443761237,443694136,443967018,444223468,443707675,443690309,443361716,443489008,443306109,443989350,443086556,444130873,443867316,443838034,442516692,443782466,443549612,443487653,443467059,443933492,444116748,443998536,443463775,443863038,443663862,443574919,443646631,443625995,443399448,443261391,443551359,443501877,444108342,443582077,444110964,443690228,443546437,443747581,443855473,443830566,443526309,444206330,443165986,443765813,443744505,443202419,443748275,443873938,443487254,443193103,443727409,443556709,444216964,443803555,442682679,443809905,443630022,443290204,443636468]
#print (" NODE = 128 THRD_PER_RANK = 1  ", len(alive_128_64))

num_ticks_list= list(range(1,257))


# plotting the points  
plt.plot(num_ticks_list, alive_128_1, color='green', linestyle='-', linewidth = 1, label = "64 thread per MPI rank") 

plt.plot(num_ticks_list, alive_128_2, color='red', linestyle='-', linewidth = 1, label = "32 thread per MPI rank") 

plt.plot(num_ticks_list, alive_128_4, color='cyan', linestyle='-', linewidth = 1, label = "16 thread per MPI rank") 

plt.plot(num_ticks_list, alive_128_16, color='purple', linestyle='-', linewidth = 1, label = "4 thread per MPI rank") 

plt.plot(num_ticks_list, alive_128_64, color='black', linestyle='-', linewidth = 1, label = "1 thread per MPI rank") 

plt.legend()

# naming the x axis 
plt.xlabel('Number of Ticks') 
# naming the y axis 
plt.ylabel('Number of ALIVE Cells') 
# giving a title to my graph 
plt.title('Number of ALIVE Cells vs. Number of Ticks for 128 Nodes with Threshold 0.25') 
plt.show() 

##############################################################################################################
##  Figure 2: Plot X: tick number Y:number of ALIVE cells  for 5 experiments of 128 nodes(Zoomed in Version)##
##############################################################################################################

# plotting the points  
plt.plot(num_ticks_list, alive_128_1, color='green', linestyle='-', linewidth = 1, label = "64 thread per MPI rank") 

plt.plot(num_ticks_list, alive_128_2, color='red', linestyle='-', linewidth = 1, label = "32 thread per MPI rank") 

plt.plot(num_ticks_list, alive_128_4, color='cyan', linestyle='-', linewidth = 1, label = "16 thread per MPI rank") 

plt.plot(num_ticks_list, alive_128_16, color='purple', linestyle='-', linewidth = 1, label = "4 thread per MPI rank") 

plt.plot(num_ticks_list, alive_128_64, color='black', linestyle='-', linewidth = 1, label = "1 thread per MPI rank") 

plt.legend()

plt.ylim(4e8, 4.5e8)
# naming the x axis 
plt.xlabel('Number of Ticks') 
# naming the y axis 
plt.ylabel('Number of ALIVE Cells') 
plt.title('Number of ALIVE Cells vs. Number of Ticks (y from 4e8 to 4.5e8)') 
# function to show the plot 
plt.show() 

####################################################################################################
##  Figure 3: Plot X: the total number of MPI ranks * Pthreads per rank Y: compute execution time ##
####################################################################################################
total_rank_number = [256, 1024, 4096, 8192]

ratio_1 = [525.167144, 135.526524,33.087628 , 17.208566]

ratio_2 =[550.215196 , 136.846135 ,34.321755,17.298261 ]

ratio_16 =[ 680.855941 , 167.824927,43.369096 ,22.934686]

ratio_32= [ 824.787272 , 208.638049, 53.203491, 27.940603]

ratio_64 =[1132.396508 , 285.833141, 72.669668,37.803246]


plt.plot(total_rank_number, ratio_64, color='green', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='blue', markersize=3,label = "64 thread per MPI rank") 

plt.plot(total_rank_number, ratio_32, color='red', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='y', markersize=3,label = "32 thread per MPI rank") 

plt.plot(total_rank_number, ratio_16, color='cyan', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='coral', markersize=3,label = "16 thread per MPI rank") 

plt.plot(total_rank_number, ratio_2, color='purple', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='gold', markersize=3,label = "4 thread per MPI rank") 

plt.plot(total_rank_number, ratio_1, color='black', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='grey', markersize=3,label = "1 thread per MPI rank") 


plt.legend()


# naming the x axis 
plt.xlabel('Total Number of MPI Ranks * Threads per Rank ') 
# naming the y axis 
plt.ylabel('Compute Execution Time (seconds)') 
# giving a title to my graph 
plt.title('Compute Execution Time vs. Total Number of MPI Ranks * Threads per Rank') 
# function to show the plot 
plt.show()


####################################################################################################
##  Figure 4: Plot X:  Total Number of MPI Ranks * Threads per Rank  Y: speedup  (First Version)  ##
####################################################################################################

#compute the speedup using the formula
#(the compute execution time of x threads per rank using 4 compute nodes)/(the compute execution time
#of the same x threads per rank using 4/16/64/128 compute nodes).

mpi_rank_number= [256, 1024, 4096, 8192]

time_4_nodes = [525.167144, 550.215196 ,680.855941 ,824.787272,1132.396508 ]

time_16_nodes = [135.526524 ,136.846135 ,167.824927, 208.638049, 285.833141]

time_64_nodes = [33.087628 , 34.321755, 43.369096 , 53.203491 , 72.669668]

time_128_nodes = [17.208566, 17.298261, 22.934686, 27.940603 , 37.803246 ]

speedup_ratio_1 =[]
speedup_ratio_4 =[]
speedup_ratio_16 =[]
speedup_ratio_32 =[]
speedup_ratio_64 =[]

speedup_ratio_1.append(time_4_nodes[0]/time_4_nodes[0])
speedup_ratio_1.append(time_4_nodes[0]/time_16_nodes[0])
speedup_ratio_1.append(time_4_nodes[0]/time_64_nodes[0])
speedup_ratio_1.append(time_4_nodes[0]/time_128_nodes[0])

speedup_ratio_4.append(time_4_nodes[1]/time_4_nodes[1])
speedup_ratio_4.append(time_4_nodes[1]/time_16_nodes[1])
speedup_ratio_4.append(time_4_nodes[1]/time_64_nodes[1])
speedup_ratio_4.append(time_4_nodes[1]/time_128_nodes[1])

speedup_ratio_16.append(time_4_nodes[2]/time_4_nodes[2])
speedup_ratio_16.append(time_4_nodes[2]/time_16_nodes[2])
speedup_ratio_16.append(time_4_nodes[2]/time_64_nodes[2])
speedup_ratio_16.append(time_4_nodes[2]/time_128_nodes[2])

speedup_ratio_32.append(time_4_nodes[3]/time_4_nodes[3])
speedup_ratio_32.append(time_4_nodes[3]/time_16_nodes[3])
speedup_ratio_32.append(time_4_nodes[3]/time_64_nodes[3])
speedup_ratio_32.append(time_4_nodes[3]/time_128_nodes[3])

speedup_ratio_64.append(time_4_nodes[4]/time_4_nodes[4])
speedup_ratio_64.append(time_4_nodes[4]/time_16_nodes[4])
speedup_ratio_64.append(time_4_nodes[4]/time_64_nodes[4])
speedup_ratio_64.append(time_4_nodes[4]/time_128_nodes[4])

plt.plot(mpi_rank_number, speedup_ratio_64, color='green', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='blue', markersize=3,label = "64 thread per MPI rank") 

plt.plot(mpi_rank_number, speedup_ratio_32, color='red', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='y', markersize=3,label = "32 thread per MPI rank") 

plt.plot(mpi_rank_number, speedup_ratio_16, color='cyan', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='coral', markersize=3,label = "16 thread per MPI rank") 

plt.plot(mpi_rank_number, speedup_ratio_4, color='purple', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='gold', markersize=3,label = "4 thread per MPI rank") 

plt.plot(mpi_rank_number, speedup_ratio_1, color='black', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='grey', markersize=3,label = "1 thread per MPI rank") 


plt.legend()


# naming the x axis 
plt.xlabel('Total Number of MPI Ranks * Threads per Rank') 
# naming the y axis 
plt.ylabel('Speedup') 
# giving a title to my graph 
plt.title('Speedup vs. Total Number of MPI Ranks * Threads per Rank ') 
# function to show the plot 
plt.show()


####################################################################################################
##  Figure 5: Plot X:  Total Number of MPI Ranks * Threads per Rank  Y: speedup  (Second Version) ##
####################################################################################################

#compute the speedup using the formula (the compute execution time of 64 threads
#per MPI rank using 4 compute nodes)/(the compute execution time of any one experiment).

mpi_rank_number2= [256, 1024, 4096, 8192]

speedup2_ratio_1 =[]
speedup2_ratio_4 =[]
speedup2_ratio_16 =[]
speedup2_ratio_32 =[]
speedup2_ratio_64 =[]

speedup2_ratio_1.append(time_4_nodes[0]/time_4_nodes[0])
speedup2_ratio_1.append(time_4_nodes[0]/time_16_nodes[0])
speedup2_ratio_1.append(time_4_nodes[0]/time_64_nodes[0])
speedup2_ratio_1.append(time_4_nodes[0]/time_128_nodes[0])

speedup2_ratio_4.append(time_4_nodes[0]/time_4_nodes[1])
speedup2_ratio_4.append(time_4_nodes[0]/time_16_nodes[1])
speedup2_ratio_4.append(time_4_nodes[0]/time_64_nodes[1])
speedup2_ratio_4.append(time_4_nodes[0]/time_128_nodes[1])

speedup2_ratio_16.append(time_4_nodes[0]/time_4_nodes[2])
speedup2_ratio_16.append(time_4_nodes[0]/time_16_nodes[2])
speedup2_ratio_16.append(time_4_nodes[0]/time_64_nodes[2])
speedup2_ratio_16.append(time_4_nodes[0]/time_128_nodes[2])

speedup2_ratio_32.append(time_4_nodes[0]/time_4_nodes[3])
speedup2_ratio_32.append(time_4_nodes[0]/time_16_nodes[3])
speedup2_ratio_32.append(time_4_nodes[0]/time_64_nodes[3])
speedup2_ratio_32.append(time_4_nodes[0]/time_128_nodes[3])

speedup2_ratio_64.append(time_4_nodes[0]/time_4_nodes[4])
speedup2_ratio_64.append(time_4_nodes[0]/time_16_nodes[4])
speedup2_ratio_64.append(time_4_nodes[0]/time_64_nodes[4])
speedup2_ratio_64.append(time_4_nodes[0]/time_128_nodes[4])

plt.plot(mpi_rank_number2, speedup2_ratio_64, color='green', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='blue', markersize=3,label = "64 thread per MPI rank") 

plt.plot(mpi_rank_number2, speedup2_ratio_32, color='red', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='y', markersize=3,label = "32 thread per MPI rank") 

plt.plot(mpi_rank_number2, speedup2_ratio_16, color='cyan', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='coral', markersize=3,label = "16 thread per MPI rank") 

plt.plot(mpi_rank_number2, speedup2_ratio_4, color='purple', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='gold', markersize=3,label = "4 thread per MPI rank") 

plt.plot(mpi_rank_number2, speedup2_ratio_1, color='black', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='grey', markersize=3,label = "1 thread per MPI rank") 


plt.legend()


# naming the x axis 
plt.xlabel('Total Number of MPI Ranks * Threads per Rank') 
# naming the y axis 
plt.ylabel('Speedup') 
# giving a title to my graph 
plt.title('Speedup Relative to 64 Threads per MPI Rank for 4 Compute Nodes vs. Total Number of Processors ') 
# function to show the plot 
plt.show()

#############################################################################################################
##  Figure 6: Plot X:  Total Number of MPI Ranks * Threads per Rank  Y: Speedup/Total Number of Processors ##
#############################################################################################################

mpi_rank_number2= [256, 1024, 4096, 8192]

speedup3_ratio_1 =[]
speedup3_ratio_4 =[]
speedup3_ratio_16 =[]
speedup3_ratio_32 =[]
speedup3_ratio_64 =[]

speedup3_ratio_1.append(time_4_nodes[0]/time_4_nodes[0]/mpi_rank_number2[0])
speedup3_ratio_1.append(time_4_nodes[0]/time_16_nodes[0]/mpi_rank_number2[1])
speedup3_ratio_1.append(time_4_nodes[0]/time_64_nodes[0]/mpi_rank_number2[2])
speedup3_ratio_1.append(time_4_nodes[0]/time_128_nodes[0]/mpi_rank_number2[3])

speedup3_ratio_4.append(time_4_nodes[0]/time_4_nodes[1]/mpi_rank_number2[0])
speedup3_ratio_4.append(time_4_nodes[0]/time_16_nodes[1]/mpi_rank_number2[1])
speedup3_ratio_4.append(time_4_nodes[0]/time_64_nodes[1]/mpi_rank_number2[2])
speedup3_ratio_4.append(time_4_nodes[0]/time_128_nodes[1]/mpi_rank_number2[3])

speedup3_ratio_16.append(time_4_nodes[0]/time_4_nodes[2]/mpi_rank_number2[0])
speedup3_ratio_16.append(time_4_nodes[0]/time_16_nodes[2]/mpi_rank_number2[1])
speedup3_ratio_16.append(time_4_nodes[0]/time_64_nodes[2]/mpi_rank_number2[2])
speedup3_ratio_16.append(time_4_nodes[0]/time_128_nodes[2]/mpi_rank_number2[3])

speedup3_ratio_32.append(time_4_nodes[0]/time_4_nodes[3]/mpi_rank_number2[0])
speedup3_ratio_32.append(time_4_nodes[0]/time_16_nodes[3]/mpi_rank_number2[1])
speedup3_ratio_32.append(time_4_nodes[0]/time_64_nodes[3]/mpi_rank_number2[2])
speedup3_ratio_32.append(time_4_nodes[0]/time_128_nodes[3]/mpi_rank_number2[3])

speedup3_ratio_64.append(time_4_nodes[0]/time_4_nodes[4]/mpi_rank_number2[0])
speedup3_ratio_64.append(time_4_nodes[0]/time_16_nodes[4]/mpi_rank_number2[1])
speedup3_ratio_64.append(time_4_nodes[0]/time_64_nodes[4]/mpi_rank_number2[2])
speedup3_ratio_64.append(time_4_nodes[0]/time_128_nodes[4]/mpi_rank_number2[3])

plt.plot(mpi_rank_number2, speedup3_ratio_64, color='green', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='blue', markersize=3,label = "64 thread per MPI rank") 

plt.plot(mpi_rank_number2, speedup3_ratio_32, color='red', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='y', markersize=3,label = "32 thread per MPI rank") 

plt.plot(mpi_rank_number2, speedup3_ratio_16, color='cyan', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='coral', markersize=3,label = "16 thread per MPI rank") 

plt.plot(mpi_rank_number2, speedup3_ratio_4, color='purple', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='gold', markersize=3,label = "4 thread per MPI rank") 

plt.plot(mpi_rank_number2, speedup3_ratio_1, color='black', linestyle='-', linewidth = 1, 
         marker='o', markerfacecolor='grey', markersize=3,label = "1 thread per MPI rank") 


plt.legend(loc='center left' , bbox_to_anchor=(1,0.5) )


# naming the x axis 
plt.xlabel('Total Number of MPI Ranks * Threads per Rank') 
# naming the y axis 
plt.ylabel('Speedup/Total Number of Processors') 
# giving a title to my graph 
plt.title('Parallel Efficiency ') 
# function to show the plot 
plt.show()


